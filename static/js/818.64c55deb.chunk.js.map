{"version":3,"file":"static/js/818.64c55deb.chunk.js","mappings":"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","sources":["assets/components/detail/header.js"],"sourcesContent":["import React, {useState,useEffect} from 'react';\r\nimport ModalVideo from 'react-modal-video';\r\nimport {Row, Col, Image, Rate, Skeleton} from 'antd';\r\nimport Logo from '../../img/image-not-available.png';\r\nimport './detail.css';\r\nimport { CircularProgressbar ,buildStyles } from 'react-circular-progressbar';\r\n\r\nconst HeaderDetail = ({dataMovies, loading}) => {\r\n    const [isOpen,setIsOpen] = useState(false);\r\n    const [key, setKey] = useState('');\r\n    const [runtime,setRuntime] = useState('0')\r\n    const [defaultValue, setDefaultValue] = useState(10);\r\n    useEffect(() => {\r\n        //setKey: // checker nếu có results thì mới sử lý tiếp.\r\n        if (dataMovies.videos) {\r\n            if('results' in dataMovies.videos){\r\n                if (dataMovies.videos.results.length > 0) {\r\n                    setKey(dataMovies.videos.results[0].key)\r\n                }\r\n            }\r\n        }else {\r\n            setKey('')\r\n        }\r\n        console.log(Math.round(dataMovies.vote_average*10))\r\n\r\n        //setRuntime.\r\n        if (dataMovies.runtime){\r\n            let d = Number(dataMovies.runtime)*60;\r\n            let h = Math.floor(d / 3600);\r\n            let m = Math.floor(d % 3600 / 60);\r\n            setRuntime(`${h}h ${m}m`)\r\n        }\r\n\r\n        if (dataMovies.vote_average){\r\n            setDefaultValue(Number(dataMovies.vote_average))\r\n        }\r\n    },[dataMovies])\r\n\r\n    if (loading) {\r\n        return(\r\n\r\n            <Row style={{backgroundImage : `linear-gradient(to right, rgba(10.5, 31.5, 31.5, 1) 0%, rgba(10.5, 31.5, 31.5, 0.84) 5%), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces/${dataMovies.backdrop_path})`}} className={'header_detail-row'}>\r\n                <Col span={6} className={'header_detail-col-1'} >\r\n                    <Skeleton active/>\r\n                </Col>\r\n                <Col span={17} offset={1} className={'header_detail-col-2'}>\r\n                    <Skeleton active/>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Row style={{backgroundImage : `linear-gradient(to right, rgba(10.5, 31.5, 31.5, 1) 0%, rgba(10.5, 31.5, 31.5, 0.84) 5%), url(https://www.themoviedb.org/t/p/w1920_and_h800_multi_faces/${dataMovies.backdrop_path})`}} className={'header_detail-row'}>\r\n            <Col span={6} className={'header_detail-col-1'} >\r\n                <Image\r\n                    src={dataMovies.poster_path? `https://image.tmdb.org/t/p/w300_and_h450_bestv2/${dataMovies.poster_path}` : Logo}\r\n                />\r\n                <button type=\"primary\"  className={'header_detail--trailer'} onClick={()=> setIsOpen(true)}>\r\n                    <span>Trailer</span>\r\n                </button>\r\n                <ModalVideo channel='youtube' autoplay controls isOpen={isOpen} videoId={key} onClose={() => setIsOpen(false)} />\r\n            </Col>\r\n            <Col span={17} offset={1} className={'header_detail-col-2'}>\r\n                <div className={'div-custom'}>\r\n                    <h2 className={'header_detail-col-2--title'}>\r\n                        {dataMovies.title} ({dataMovies.release_date? dataMovies.release_date.slice(0,4): ''})\r\n                    </h2>\r\n                </div>\r\n                <div>\r\n                    <h2 className={'header_detail-col-2--genres'}>\r\n                        <span className={'header_detail-col-2--genres--title'}>GENRES : </span>\r\n                        {dataMovies.genres? dataMovies.genres.map((item) => {\r\n                            return (\r\n                                <a key={item.id} href={`https://www.themoviedb.org/genre/${item.id}-${item.name}/movie`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    {item.name},\r\n                                </a>\r\n                            )\r\n                        }): ''}\r\n                        <span className={'header_detail-col-2--genres--runtime'}>\r\n                            - {runtime}\r\n                        </span>\r\n                    </h2>\r\n                </div>\r\n                <div className={'header_detail__vote'}>\r\n                    <div className={'circular_detail'}>\r\n                        <CircularProgressbar \r\n                            background={true} \r\n                            value={Math.round(dataMovies.vote_average*10)} \r\n                            text={`${Math.round(dataMovies.vote_average*10)}%`}\r\n                            styles={buildStyles({\r\n                                // Rotation of path and trail, in number of turns (0-1)\r\n                                rotation: 0,\r\n                            \r\n                                // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n                                strokeLinecap: 'butt',\r\n                            \r\n                                textSize: '28px',\r\n                            \r\n                                pathTransitionDuration: 0.5,\r\n                            \r\n                                // Colors\r\n                                pathColor: `${dataMovies.vote_average*10 > 70?  '#20cf79' :'#cfd230'}`,\r\n                                textColor: '#fff',\r\n                                trailColor: `${dataMovies.vote_average*10 > 70?  '#204529' :'#413c0e'}`,\r\n                                backgroundColor: '#081c22',\r\n                            })}\r\n                        />\r\n                    </div>\r\n                    <div style={{display: 'inline-block'}}>\r\n                        <h3 className=\"user-score\" style={{display: 'inline-block'}}>\r\n                        User Score\r\n                        </h3>\r\n                    </div>\r\n                </div>\r\n                <Rate className=\"header_detail__rate\" allowClear allowHalf defaultValue={defaultValue}  count={10}/>\r\n                <span style={{color: '#fff', fontSize: '16px', fontWeight: '600', marginLeft: '10px', opacity: '0.8'}}> Vote: {dataMovies.vote_count? dataMovies.vote_count: '0'}</span>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default React.memo(HeaderDetail);"],"names":["HeaderDetail","dataMovies","loading","useState","isOpen","setIsOpen","key","setKey","runtime","setRuntime","defaultValue","setDefaultValue","useEffect","videos","results","length","console","log","Math","round","vote_average","d","Number","h","floor","m","style","backgroundImage","backdrop_path","className","span","active","offset","src","poster_path","Logo","type","onClick","channel","autoplay","controls","videoId","onClose","title","release_date","slice","genres","map","item","href","id","name","target","rel","background","value","text","styles","buildStyles","rotation","strokeLinecap","textSize","pathTransitionDuration","pathColor","textColor","trailColor","backgroundColor","display","allowClear","allowHalf","count","color","fontSize","fontWeight","marginLeft","opacity","vote_count","React"],"sourceRoot":""}